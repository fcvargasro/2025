import geopandas as gpd
import pandas as pd
import matplotlib.pyplot as plt
from shapely.geometry import Point
from geopy.distance import geodesic
import re

# === 1. Leer shapefile de distritos y filtrar solo PIURA ===
districts = gpd.read_file(r"C:\Users\FC.VargasRo\Documents\DG\DISTRITOS.shp")
districts = districts.to_crs("EPSG:4326")
districts = districts[districts['DEPARTAMEN'] == 'PIURA'].copy()

# === 2. Leer CSV de estaciones ===
stations_df = pd.read_csv(r"C:\Users\FC.VargasRo\Documents\DG\PIURASTMTH.csv")

# === 3. Convertir coordenadas DMS a decimal ===
def dms_to_dd(dms_str):
    dms_str = dms_str.strip().replace("′", "'").replace("”", '"').replace("’", "'")
    match = re.match(r"(-?\d+)°(\d+)'([\d.]+)\"", dms_str)
    if match:
        degrees, minutes, seconds = map(float, match.groups())
        dd = abs(degrees) + minutes / 60 + seconds / 3600
        return -dd if "-" in dms_str else dd
    else:
        raise ValueError(f"Formato inválido: {dms_str}")

stations_df['Longitude'] = stations_df['Longitude'].apply(dms_to_dd)
stations_df['Latitude'] = stations_df['Latitude'].apply(dms_to_dd)

# === 4. Crear GeoDataFrame de estaciones ===
stations_gdf = gpd.GeoDataFrame(
    stations_df,
    geometry=gpd.points_from_xy(stations_df['Longitude'], stations_df['Latitude']),
    crs="EPSG:4326"
)

# === 5. Calcular centroides de distritos ===
districts['centroid'] = districts.geometry.centroid
districts_centroids = gpd.GeoDataFrame(
    districts[['DISTRITO', 'centroid']],
    geometry=districts['centroid'],
    crs="EPSG:4326"
)

# === 6. Calcular estación más cercana y distancia ===
def get_nearest_station_info(district_point):
    distances = stations_gdf.geometry.distance(district_point)
    nearest_idx = distances.idxmin()
    nearest_station = stations_gdf.loc[nearest_idx, 'stations']
    station_geom = stations_gdf.loc[nearest_idx].geometry
    dist_km = geodesic(
        (district_point.y, district_point.x),
        (station_geom.y, station_geom.x)
    ).kilometers
    return pd.Series([nearest_station, round(dist_km, 2)])

districts_centroids[['NearestStation', 'Distance_km']] = districts_centroids.geometry.apply(
    get_nearest_station_info
)

# === 7. Unir la info al GeoDataFrame de distritos ===
districts = districts.merge(
    districts_centroids[['DISTRITO', 'NearestStation', 'Distance_km']],
    on='DISTRITO'
)

# === 8. Guardar resultados en CSV ===
districts[['DISTRITO', 'NearestStation', 'Distance_km']].to_csv(
    r"C:\Users\FC.VargasRo\Documents\DG\Distritos_Estaciones_Asignadas.csv",
    index=False
)
print(" Resultado guardado con estaciones y distancias en kilómetros.")

# === 9. Visualización  ===
fig, ax = plt.subplots(figsize=(10, 10))
districts.plot(ax=ax, color='lightgrey', edgecolor='black')
stations_gdf.plot(ax=ax, color='red', markersize=30, label='Estaciones')
districts_centroids.plot(ax=ax, color='blue', markersize=10, label='Centroides')

for idx, row in districts_centroids.iterrows():
    nearest_station_geom = stations_gdf[stations_gdf['stations'] == row['NearestStation']].geometry.values[0]
    ax.plot(
        [row.geometry.x, nearest_station_geom.x],
        [row.geometry.y, nearest_station_geom.y],
        color='gray', linestyle='--', linewidth=0.5
    )

plt.legend()
plt.title("Distritos de Piura asociados a su estación más cercana")
plt.show()
